name: Build, test and push to MyGet

on:
  # Triggers the workflow on push or pull request events
  push:
    branches: [ test ] # Add "main"  later
  #pull_request:
  #  branches: [ main, test ]
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  Build:
    runs-on: windows-latest

    env:
      DOTNET_VERSION: '6.0.401'
      VS_VERSION: '[17.3, 17.4)'
      SOLUTION_NAME: 'TestConsoleApp\TestConsoleApp' # 'CDV'
      BUILD_CONFIGURATION: 'Release' # Debug or Release
      MYGET_REPO: 'https://topicushealthcare.myget.org/F/calculus/api/v2'
      OCTOPUS_SPACE: 'Calculus'
      OCTOPUS_SERVER: 'https://octopusdeploy.topicuszorg.nl/'
      OCTOPUS_FOLDER: 'TestConsoleApp' # 'CDV'

    steps:
      - name: Git Checkout
        uses: actions/checkout@v3
        
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1        
        with:
          vs-version: ${{ env.VS_VERSION }}

      - name: Setup Dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install Octopus CLI
        uses: OctopusDeploy/install-octopus-cli-action@v1.1.7
        with:
          version: latest
          
      - name: Cache NuGet packages
        id: nuget-cache
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-          

      - name: Restore solution and NuGet packages
        run: dotnet restore ${{ env.SOLUTION_NAME }}.sln

      - name: msbuild Build
        run: msbuild /m ${{ env.SOLUTION_NAME }}.sln /p:TreatWarningsAsErrors=false /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:DebugSymbols=true /p:DebugType=PdbOnly /clp:ErrorsOnly /nr:false /p:WarningsAsErrors="S1128"

      #- name: Dotnet Build
      #  run: dotnet build ${{ env.SOLUTION_NAME }}.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
        
      - name: Dotnet Test
        run: dotnet test ${{ env.SOLUTION_NAME }}.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --no-build --collect:"XPlat Code Coverage" --results-directory reports --settings coverage.runsettings.xml --logger="trx;" --nologo

      - name: Dotnet Publish
        run: dotnet publish --no-restore ${{ env.SOLUTION_NAME }} -o ${{ runner.temp }}\publish\${{ env.OCTOPUS_FOLDER }}

      - name: Octo Pack
        run: octo pack --id=${{ env.OCTOPUS_FOLDER }} --outfolder=${{ runner.temp }}\octopackages --basePath=${{ runner.temp }}\publish\${{ env.OCTOPUS_FOLDER }}

      #- name: Push to MyGet
      #  if: "${{ success() }}"
      #  run: dotnet nuget push ${{ runner.temp }}\octopackages\*.nupkg --api-key ${{ secrets.MYGET_API_KEY }} --source ${{ env.MYGET_REPO }}

      #- name: Create a release in Octopus Deploy
      #  uses: OctopusDeploy/create-release-action@v3
      #  with:
      #    api_key: ${{ secrets.OCTOPUS_API_KEY }}
      #    project: ${{ env.SOLUTION_NAME }}
      #    space: ${{ env.OCTOPUS_SPACE }}
      #    server: ${{ env.OCTOPUS_SERVER }}
      #    proxy: ${{ steps.octo_proxy.outputs.proxy_location }}
      #    packages_folder: ${{ runner.temp }}\octopackages
