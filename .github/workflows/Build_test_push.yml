name: Build, test and push to MyGet

on:
  # Triggers the workflow on push or pull request events
  push:
    branches: [ test ] # Add "main" later
  #pull_request:
  #  branches: [ main, test ]
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  Build:
    runs-on: windows-latest

    env:
      DOTNET_VERSION: '6.0.401'
      SOLUTION_NAME: 'TestConsoleApp\TestConsoleApp' # 'CDV'
      READABLE_PACKAGE_VERSION: '1234'
      BUILD_CONFIGURATION: 'Debug' # Debug or Release
      MSBUILD_FLAGS_1: '/m /nr:false /clp:ErrorsOnly /p:DebugSymbols=true /p:DebugType=pdbonly /p:WarningsAsErrors="CS0168;CS0169;CS0219;CS1998" /warnaserror:MSB3247;'
      MSBUILD_FLAGS: '/m /nr:false /clp:ErrorsOnly /p:DebugSymbols=true /p:DebugType=pdbonly /warnaserror:MSB3247'      
      MYGET_REPO: 'https://topicushealthcare.myget.org/F/calculus/api/v2'
      OCTOPUS_API_KEY: credentials('octopus-calculus-apikey')
      OCTOPUS_CLI_SERVER: 'https://octopusdeploy.topicuszorg.nl/'
      OCTOPUS_SPACE: 'Calculus'
      OCTOPUS_SPACE_ID: '5'
      OCTOPUS_PROJECT: 'CDV'
      OCTOPUS_SERVER: 'https://octopusdeploy.topicuszorg.nl/'
      OCTOPUS_FOLDER: 'TestConsoleApp' # 'CDV'      

    steps:
      - name: Git Checkout
        uses: actions/checkout@v3

      - name: Setup Dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1        

      - name: Install Octopus CLI
        uses: OctopusDeploy/install-octopus-cli-action@v1.1.7
        with:
          version: latest
          
      - name: Cache NuGet packages
        id: nuget-cache
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-          

      - name: Show versions and cache hit
        run: |
          git status
          dotnet --version
          msbuild /version
          Write-Output "Nuget cache hit: " ${{ steps.nuget-cache.outputs.cache-hit }}
          Write-Output "Nuget cache hit: " ${{ steps.nuget-cache.outputs.cache-hit == 'true' }}
          Write-Output "GITHUB_RUN_NUMBER: " $GITHUB_RUN_NUMBER
          Write-Output "GITHUB_REF_NAME: " $GITHUB_REF_NAME
          Write-Output "GITHUB_SHA: " $GITHUB_SHA
          Write-Output "GITHUB_RUN_NUMBER: " ${{ env.GITHUB_RUN_NUMBER }}
          Write-Output "GITHUB_REF_NAME: " ${{ env.GITHUB_REF_NAME }}
          Write-Output "GITHUB_SHA: " ${{ env.GITHUB_SHA }}
          
      - name: Early exit
        run: |
          gh run cancel ${{ github.run_id }}
          gh run watch ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          
          
      - name: Nuget restore solution and NuGet packages
        run: nuget restore ${{ env.SOLUTION_NAME }}.sln -Verbosity quiet

      - name: Dotnet restore solution and NuGet packages
        run: dotnet restore ${{ env.SOLUTION_NAME }}.sln -verbosity:quiet

      - name: Build Debug version using msbuild
        run: msbuild ${{ env.SOLUTION_NAME }}.sln /p:configuration=${{ env.BUILD_CONFIGURATION }} ${{ env.MSBUILD_FLAGS }}
        if: ${{ env.BUILD_CONFIGURATION == 'Debug' }}
      - name: Build Release version using msbuild
        run: msbuild ${{ env.SOLUTION_NAME }}.sln /p:configuration=${{ env.BUILD_CONFIGURATION }} ${{ env.MSBUILD_FLAGS }} /p:RunOctoPack=true /p:OctoPackPublishPackageToFileShare="${{ runner.temp }}\octo_packages" /p:OctoPackPackageVersion="${{ env.READABLE_PACKAGE_VERSION }}"
        if: ${{ env.BUILD_CONFIGURATION == 'Release' }}
        
      #- name: Dotnet Build
      #  run: dotnet build ${{ env.SOLUTION_NAME }}.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
        
      - name: Dotnet Test
        run:  dotnet test ${{ env.SOLUTION_NAME }}.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --no-build --collect:"XPlat Code Coverage" --results-directory reports --settings Unit.runsettings --logger="trx;" --nologo

      - name: Dotnet Publish and Octo pack
        run: |
          dotnet publish --no-build ${{ env.SOLUTION_NAME }} -o ${{ runner.temp }}\${{ env.OCTOPUS_FOLDER }}
          octo pack --id=${{ env.OCTOPUS_FOLDER }} --version=${{ env.READABLE_PACKAGE_VERSION }} --outFolder=${{ runner.temp }}\octo_packages --basePath=${{ runner.temp }}\${{ env.OCTOPUS_FOLDER }}
        #if: ${{ env.BUILD_CONFIGURATION == 'Release' }}

      #- name: Push to MyGet
      #  if: "${{ success() }}"
      #  run: dotnet nuget push ${{ runner.temp }}\octopackages\*.nupkg --api-key ${{ secrets.MYGET_API_KEY }} --source ${{ env.MYGET_REPO }}

      #- name: Create a release in Octopus Deploy
      #  uses: OctopusDeploy/create-release-action@v3
      #  with:
      #    api_key: ${{ secrets.OCTOPUS_API_KEY }}
      #    project: ${{ env.SOLUTION_NAME }}
      #    space: ${{ env.OCTOPUS_SPACE }}
      #    server: ${{ env.OCTOPUS_SERVER }}
      #    proxy: ${{ steps.octo_proxy.outputs.proxy_location }}
      #    packages_folder: ${{ runner.temp }}\octopackages
