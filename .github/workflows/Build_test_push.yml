name: Build, test, push to MyGet, create release in Octopus

on:
  #push:
  #  branches: main
  pull_request:
    branches: main
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
  
env:
  BUILD_CONFIGURATION: 'Debug' # Debug or Release
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}      
  SLACK_BOT_CHANNEL: 'CMK620AJU,GFE5FM8MT' # calculus-deploys, calculus-robots

jobs:
  Build:
    name: 'Build, test, push and create release'
    runs-on: windows-latest
    env:
      SOLUTION_NAME: 'TestConsoleApp\TestConsoleApp' # 'CDV'
      MSBUILD_FLAGS_1: '/m /nr:false /clp:ErrorsOnly /p:DebugSymbols=true /p:DebugType=pdbonly /p:WarningsAsErrors="CS0168;CS0169;CS0219;CS1998" /warnaserror:MSB3247;'
      MSBUILD_FLAGS: '/m /nr:false /clp:ErrorsOnly /p:DebugSymbols=true /p:DebugType=pdbonly /warnaserror:MSB3247'      
      MYGET_REPO: 'https://topicushealthcare.myget.org/F/calculus/api/v2'
      OCTOPUS_API_KEY: credentials('octopus-calculus-apikey')
      OCTOPUS_CLI_SERVER: 'https://octopusdeploy.topicuszorg.nl/'
      OCTOPUS_SPACE: 'Calculus'
      OCTOPUS_SPACE_ID: '5'
      OCTOPUS_PROJECT: 'CDV'
      OCTOPUS_SERVER: 'https://octopusdeploy.topicuszorg.nl/'
      OCTOPUS_FOLDER: 'TestConsoleApp'
      
    outputs:
      OCTO_PACKAGE_VERSION: ${{ steps.SET_OCTO_PACKAGE_VERSION.outputs.OCTO_PACKAGE_VERSION }}

    steps:
      - name: Set environment and outut variables OCTO_PACKAGE_VERSION # https://stackoverflow.com/questions/61858388/how-do-i-set-an-enviroment-variable-in-github-action-on-a-windows-server
        id: SET_OCTO_PACKAGE_VERSION
        run: |
          chcp 65001 # Set code page to utf-8
          $version = "6.3.${{ github.run_number }}-${{ github.event.repository.name }}-${{ github.ref_name }}-${{ env.BUILD_CONFIGURATION }}"
          $version = $version.Replace('/','-').Replace('_','-')
          if ($version.Length > 18) { $version = $version.Substring(0,18) }
          echo OCTO_PACKAGE_VERSION=$version >> $env:GITHUB_ENV
          echo OCTO_PACKAGE_VERSION=$version >> $env:GITHUB_OUTPUT
          echo $version
          
      - name: Set environment variable OCTO_PACKAGE_CHANNEL # https://stackoverflow.com/questions/61858388/how-do-i-set-an-enviroment-variable-in-github-action-on-a-windows-server
        run: |
          chcp 65001 # Set code page to utf-8
          $refname = "${{ github.ref_name }}"
          $channel = "Development"
          if ($refname.ToLower().Contains("main")) { $channel = "Full Versions" }
          echo OCTO_PACKAGE_CHANNEL=$channel >> $env:GITHUB_ENV
          echo $channel
          
      - name: Git Checkout
        uses: actions/checkout@v3
        
      - name: Setup Dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1        

      - name: Cache NuGet packages
        id: nuget-cache
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-          

      - name: Show versions and run info
        run: |
          git status
          dotnet --version
          msbuild /version     
          echo "Nuget cache hit: " ${{ steps.nuget-cache.outputs.cache-hit }}
          echo "GITHUB_RUN_NUMBER: " ${{ github.run_number }}
          echo "GITHUB_REF_NAME: " ${{ github.ref_name }}
          echo "GITHUB_SHA: " ${{ github.sha }}   

      - name: Nuget restore solution and NuGet packages
        run: nuget restore ${{ env.SOLUTION_NAME }}.sln -Verbosity quiet

      - name: Dotnet restore solution and NuGet packages
        run: dotnet restore ${{ env.SOLUTION_NAME }}.sln -verbosity:quiet

      - name: Build Debug version using msbuild
        if: ${{ env.BUILD_CONFIGURATION == 'Debug' }}
        run: msbuild ${{ env.SOLUTION_NAME }}.sln /p:configuration=${{ env.BUILD_CONFIGURATION }} ${{ env.MSBUILD_FLAGS }}
      - name: Build Release version using msbuild
        if: ${{ env.BUILD_CONFIGURATION == 'Release' }}
        run: msbuild ${{ env.SOLUTION_NAME }}.sln /p:configuration=${{ env.BUILD_CONFIGURATION }} ${{ env.MSBUILD_FLAGS }} /p:RunOctoPack=true /p:OctoPackPublishPackageToFileShare="${{ runner.temp }}\octo_packages" /p:OctoPackPackageVersion="${{ env.OCTO_PACKAGE_VERSION }}"
        
      - name: Dotnet Test
        run:  dotnet test ${{ env.SOLUTION_NAME }}.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --no-build --collect:"XPlat Code Coverage" --results-directory reports --settings Unit.runsettings --logger="trx;" --nologo

      - name: Install Octopus CLI
        if: ${{ env.BUILD_CONFIGURATION == 'Release' }}          
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest
          
      - name: Dotnet Publish and Octo pack for .Net (Core) projects          
        if: ${{ env.BUILD_CONFIGURATION == 'Release' }}
        run: |
          dotnet publish --no-build ${{ env.SOLUTION_NAME }} --configuration ${{ env.BUILD_CONFIGURATION }} --output ${{ runner.temp }}\${{ env.OCTOPUS_FOLDER }}
          octo pack --id=${{ env.OCTOPUS_FOLDER }} --version=${{ env.OCTO_PACKAGE_VERSION }} --outFolder=${{ runner.temp }}\octo_packages --basePath=${{ runner.temp }}\${{ env.OCTOPUS_FOLDER }} --overwrite # overwrite: package file alreaady exists, just for testing

      #- name: Push to MyGet
      #  if: ${{ env.BUILD_CONFIGURATION == 'Release' }}
      #  run: nuget push ${{ runner.temp }}\octo_packages\*.nupkg -ApiKey ${{ secrets.CALCULUS_GITHUB_MYGET_API_KEY }} -Source ${{ env.MYGET_REPO }} # -Timeout (default 300 seconds)
      #  #run: dotnet nuget push ${{ runner.temp }}\octo_packages\*.nupkg --api-key ${{ secrets.ORG_MYGET_API_TOKEN }} -s ${{ env.MYGET_REPO }} # --timeout (default 300 seconds)
        
      #- name: Create a release in Octopus Deploy
      #  if: ${{ env.BUILD_CONFIGURATION == 'Release' }}
      #  run:  octo create-release --project="CDV" --space="Calculus" --channel=${{ env.OCTO_PACKAGE_CHANNEL }} --packagesFolder=${{ runner.temp }}\octo_packages\*.nupkg --version=${{ env.OCTO_PACKAGE_VERSION }} --packageVersion=${{ env.OCTO_PACKAGE_VERSION }} --apiKey=${{ secrets.CALCULUS_GITHUB_OCTOPUS_API_KEY }}        
      
      - name: Notify Slack of successful CI/CD run
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ env.SLACK_BOT_CHANNEL }}
          slack-message: "CI/CD (${{ env.BUILD_CONFIGURATION }} version ${{ env.OCTO_PACKAGE_VERSION }}) succesvol afgesloten voor: ${{ github.repository }} (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}| Details>)"      

  NotifyFailure:          
    name: Notify Slack of failed Build job
    runs-on: windows-latest
    needs: Build # Needs 'succeful' Build job, but...
    if: ${{!success()}} # ...only if that one fails
    steps:
      - name: Notify Slack of failed CI/CD run
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ env.SLACK_BOT_CHANNEL }}
          slack-message: "Error tijdens CI/CD (${{ env.BUILD_CONFIGURATION }} version  ${{ needs.Build.outputs.OCTO_PACKAGE_VERSION }}) voor: ${{ github.repository }} (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}| Details>)"            
          
      #- name: Check OCTO_PACKAGE_VERSION
      #  run: |
      #    echo 'OCTO_PACKAGE_VERSION: ' ${{ env.OCTO_PACKAGE_VERSION }}
      
      #- name: Check OCTO_PACKAGE_VERSION in dependent job
      #  run: |
      #    echo 'OCTO_PACKAGE_VERSION: ' ${{ needs.Build.outputs.OCTO_PACKAGE_VERSION }}
          
      #- name: Dump GitHub context
      #  env:
      #    GITHUB_CONTEXT: ${{ toJson(github) }}
      #  run: echo '$GITHUB_CONTEXT'          
                      
      #- name: Early exit
      #  run: |
      #    gh run cancel ${{ github.run_id }}
      #    gh run watch ${{ github.run_id }}
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}                  
