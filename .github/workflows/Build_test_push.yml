name: Build, test, push to MyGet, create release in Octopus

on:
  # Triggers the workflow on push or pull request events
  push:
    branches: [ test ] # Add "main" later
  #pull_request:
  #  branches: [ main, test ]
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  BUILD_CONFIGURATION: 'Release' # Debug or Release
  OCTO_PACKAGE_VERSION: '1.2.6'
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}      
  SLACK_BOT_CHANNEL: 'CMK620AJU,GFE5FM8MT' # calculus-deploys, calculus-robots

jobs:
  Build:
    name: 'Build, test, push and create release'
    runs-on: windows-latest
    env:
      DOTNET_VERSION: '6.0.401'
      SOLUTION_NAME: 'TestConsoleApp\TestConsoleApp' # 'CDV'
      MSBUILD_FLAGS_1: '/m /nr:false /clp:ErrorsOnly /p:DebugSymbols=true /p:DebugType=pdbonly /p:WarningsAsErrors="CS0168;CS0169;CS0219;CS1998" /warnaserror:MSB3247;'
      MSBUILD_FLAGS: '/m /nr:false /clp:ErrorsOnly /p:DebugSymbols=true /p:DebugType=pdbonly /warnaserror:MSB3247'      
      MYGET_REPO: 'https://topicushealthcare.myget.org/F/calculus/api/v2'
      OCTOPUS_API_KEY: credentials('octopus-calculus-apikey')
      OCTOPUS_CLI_SERVER: 'https://octopusdeploy.topicuszorg.nl/'
      OCTOPUS_SPACE: 'Calculus'
      OCTOPUS_SPACE_ID: '5'
      OCTOPUS_PROJECT: 'CDV'
      OCTOPUS_SERVER: 'https://octopusdeploy.topicuszorg.nl/'
      OCTOPUS_FOLDER: 'TestConsoleApp'

    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo '$GITHUB_CONTEXT'
      - name: Set environment variable OCTO_PACKAGE_VERSION
        run: |
          if ($BRANCH -eq 'master' -and $GITHUB_EVENT_NAME -eq 'push') then
          {
            echo "OCTO_PACKAGE_VERSION= 1.2.3" >> "$GITHUB_ENV"
          }
          else
          {
              echo "OCTO_PACKAGE_VERSION= 1.2.4" >> "$GITHUB_ENV"
          }
      - name: Check environment variable OCTO_PACKAGE_VERSION
        run: |
              echo {{ env.OCTO_PACKAGE_VERSION }}
      - name: Early exit
        run: |
          gh run cancel ${{ github.run_id }}
          gh run watch ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}           
        
      - name: Git Checkout
        uses: actions/checkout@v3

      - name: Setup Dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1        

      - name: Cache NuGet packages
        id: nuget-cache
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-          

      - name: Show versions and run info
        run: |
          git status
          dotnet --version
          msbuild /version     
          Write-Output "GITHUB_RUN_NUMBER: " ${{ github.run_number }}
          Write-Output "GITHUB_REF_NAME: " ${{ github.ref_name }}
          Write-Output "GITHUB_SHA: " ${{ github.sha }}   

      - name: Nuget restore solution and NuGet packages
        run: nuget restore ${{ env.SOLUTION_NAME }}.sln -Verbosity quiet

      - name: Dotnet restore solution and NuGet packages
        run: dotnet restore ${{ env.SOLUTION_NAME }}.sln -verbosity:quiet
        
      - name: Show Nuget cache hit
        run: Write-Output "Nuget cache hit "  ${{ steps.nuget-cache.outputs.cache-hit == 'true' }}

      - name: Build Debug version using msbuild
        if: ${{ env.BUILD_CONFIGURATION == 'Debug' }}
        run: msbuild ${{ env.SOLUTION_NAME }}.sln /p:configuration=${{ env.BUILD_CONFIGURATION }} ${{ env.MSBUILD_FLAGS }}
      - name: Build Release version using msbuild
        if: ${{ env.BUILD_CONFIGURATION == 'Release' }}
        run: msbuild ${{ env.SOLUTION_NAME }}.sln /p:configuration=${{ env.BUILD_CONFIGURATION }} ${{ env.MSBUILD_FLAGS }} /p:RunOctoPack=true /p:OctoPackPublishPackageToFileShare="${{ runner.temp }}\octo_packages" /p:OctoPackPackageVersion="${{ env.OCTO_PACKAGE_VERSION }}"
        
      - name: Dotnet Test
        run:  dotnet test ${{ env.SOLUTION_NAME }}.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --no-build --collect:"XPlat Code Coverage" --results-directory reports --settings Unit.runsettings --logger="trx;" --nologo

      - name: Install Octopus CLI
        if: ${{ env.BUILD_CONFIGURATION == 'Release' }}          
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest
          
      - name: Dotnet Publish and Octo pack for .Net (Core) projects          
        if: ${{ env.BUILD_CONFIGURATION == 'Release' }}
        run: |
          dotnet publish --no-build ${{ env.SOLUTION_NAME }} --configuration ${{ env.BUILD_CONFIGURATION }} --output ${{ runner.temp }}\${{ env.OCTOPUS_FOLDER }}
          octo pack --id=${{ env.OCTOPUS_FOLDER }} --version=${{ env.OCTO_PACKAGE_VERSION }} --outFolder=${{ runner.temp }}\octo_packages --basePath=${{ runner.temp }}\${{ env.OCTOPUS_FOLDER }} --overwrite # overwrite: package file alreaady exists, just for testing

      - name: Push to MyGet
        if: ${{ env.BUILD_CONFIGURATION == 'Release' }}
        run: nuget push ${{ runner.temp }}\octo_packages\*.nupkg -ApiKey ${{ secrets.CALCULUS_GITHUB_MYGET_API_KEY }} -Source ${{ env.MYGET_REPO }} # -Timeout (default 300 seconds)
        #run: dotnet nuget push ${{ runner.temp }}\octo_packages\*.nupkg --api-key ${{ secrets.ORG_MYGET_API_TOKEN }} -s ${{ env.MYGET_REPO }} # --timeout (default 300 seconds)
        
      #- name: Create a release in Octopus Deploy
      #  if: ${{ env.BUILD_CONFIGURATION == 'Release' }}
      #  run:  octo create-release --project="CDV" --space="Calculus" --channel="Development" --packagesFolder=${{ runner.temp }}\octo_packages\*.nupkg --version=${{ env.OCTO_PACKAGE_VERSION }} --packageVersion=${{ env.OCTO_PACKAGE_VERSION }} --apiKey=${{ secrets.CALCULUS_GITHUB_OCTOPUS_API_KEY }}        
        
  NotifySuccess:
    name: Notify Slack of succcessful Build job
    runs-on: windows-latest
    needs: Build # Needs succeful Build job
    steps:
      - name: Notify Slack of successful CI/CD run
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ env.SLACK_BOT_CHANNEL }}
          slack-message: "CI/CD (${{ env.BUILD_CONFIGURATION }} version ${{ env.OCTO_PACKAGE_VERSION }}) succesvol afgesloten voor: ${{ github.repository }} (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}| Details>)"      
          
  NotifyFailure:          
    name: Notify Slack of failed Build job
    runs-on: windows-latest
    needs: Build # Needs 'succeful' Build job, but...
    if: ${{!success()}} # ...only if that one fails
    steps:
      - name: Notify Slack of failed CI/CD run
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ env.SLACK_BOT_CHANNEL }}
          slack-message: "Error tijdens CI/CD (${{ env.BUILD_CONFIGURATION }} version ${{ env.OCTO_PACKAGE_VERSION }}) voor: ${{ github.repository }} (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}| Details>)"            
                      
      #- name: Early exit
      #  run: |
      #    gh run cancel ${{ github.run_id }}
      #    gh run watch ${{ github.run_id }}
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}                  
